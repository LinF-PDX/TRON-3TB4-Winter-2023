// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/28/2022 21:08:18"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          decoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:2] instruction;
// wires                                               
wire addi;
wire br;
wire brz;
wire clr;
wire mov;
wire mova;
wire movr;
wire movrhs;
wire pause;
wire sr0;
wire srh0;
wire subi;

// assign statements (if any)                          
decoder i1 (
// port map - connection between master ports and signals/registers   
	.addi(addi),
	.br(br),
	.brz(brz),
	.clr(clr),
	.instruction(instruction),
	.mov(mov),
	.mova(mova),
	.movr(movr),
	.movrhs(movrhs),
	.pause(pause),
	.sr0(sr0),
	.srh0(srh0),
	.subi(subi)
);
initial 
begin 
#1000000 $finish;
end 

// instruction[7]
initial
begin
	instruction[7] = 1'b1;
	instruction[7] = #120000 1'b0;
	instruction[7] = #330000 1'b1;
end 

// instruction[6]
initial
begin
	instruction[6] = 1'b0;
	instruction[6] = #240000 1'b1;
end 

// instruction[5]
initial
begin
	instruction[5] = 1'b0;
	instruction[5] = #60000 1'b1;
	instruction[5] = #60000 1'b0;
	instruction[5] = #60000 1'b1;
	instruction[5] = #60000 1'b0;
	instruction[5] = #100000 1'b1;
	instruction[5] = #110000 1'b0;
	instruction[5] = #170000 1'b1;
end 

// instruction[4]
initial
begin
	instruction[4] = 1'b0;
	instruction[4] = #120000 1'b1;
	instruction[4] = #120000 1'b0;
	instruction[4] = #50000 1'b1;
	instruction[4] = #50000 1'b0;
	instruction[4] = #50000 1'b1;
	instruction[4] = #60000 1'b0;
	instruction[4] = #170000 1'b1;
end 

// instruction[3]
initial
begin
	instruction[3] = 1'b0;
	instruction[3] = #120000 1'b1;
	instruction[3] = #220000 1'b0;
	instruction[3] = #220000 1'b1;
end 

// instruction[2]
initial
begin
	instruction[2] = 1'b0;
	instruction[2] = #120000 1'b1;
	instruction[2] = #170000 1'b0;
	instruction[2] = #100000 1'b1;
	instruction[2] = #60000 1'b0;
	instruction[2] = #60000 1'b1;
	instruction[2] = #50000 1'b0;
	instruction[2] = #60000 1'b1;
end 
endmodule

