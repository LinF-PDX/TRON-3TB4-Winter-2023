// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/09/2023 15:41:31"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab2Test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab2Test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_in;
reg reset;
reg resume;
// wires                                               
wire [13:0] rand;
wire rand_ready;

// assign statements (if any)                          
lab2Test i1 (
// port map - connection between master ports and signals/registers   
	.clk_in(clk_in),
	.\rand (rand),
	.rand_ready(rand_ready),
	.reset(reset),
	.resume(resume)
);
initial 
begin 
#200000 $finish;
end 

// clk_in
always
begin
	clk_in = 1'b0;
	clk_in = #2500 1'b1;
	#2500;
end 

// reset
initial
begin
	reset = 1'b1;
end 

// resume
initial
begin
	resume = 1'b1;
	resume = #20000 1'b0;
	resume = #10000 1'b1;
	resume = #20000 1'b0;
	resume = #10000 1'b1;
	resume = #10000 1'b0;
	resume = #10000 1'b1;
	resume = #10000 1'b0;
	resume = #10000 1'b1;
	resume = #10000 1'b0;
	resume = #10000 1'b1;
	resume = #20000 1'b0;
	resume = #10000 1'b1;
end 
endmodule

